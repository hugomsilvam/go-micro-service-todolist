// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/example/example.proto

/*
Package go_micro_srv_todo_list_micro is a generated protocol buffer package.

It is generated from these files:
	proto/example/example.proto

It has these top-level messages:
	Todo
	CreateRequest
	CreateResponse
	GetRequest
	GetResponse
	GetAllRequest
	GetAllResponse
	UpdateRequest
	UpdateResponse
	DeleteRequest
	DeleteResponse
	Message
*/
package go_micro_srv_todo_list_micro

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TodoService service

type TodoService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...client.CallOption) (*GetAllResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	Hello(ctx context.Context, in *Message, opts ...client.CallOption) (*Message, error)
}

type todoService struct {
	c    client.Client
	name string
}

func NewTodoService(name string, c client.Client) TodoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.todo.list.micro"
	}
	return &todoService{
		c:    c,
		name: name,
	}
}

func (c *todoService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.Get", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) GetAll(ctx context.Context, in *GetAllRequest, opts ...client.CallOption) (*GetAllResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.GetAll", in)
	out := new(GetAllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) Hello(ctx context.Context, in *Message, opts ...client.CallOption) (*Message, error) {
	req := c.c.NewRequest(c.name, "TodoService.Hello", in)
	out := new(Message)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TodoService service

type TodoServiceHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Get(context.Context, *GetRequest, *GetResponse) error
	GetAll(context.Context, *GetAllRequest, *GetAllResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	Hello(context.Context, *Message, *Message) error
}

func RegisterTodoServiceHandler(s server.Server, hdlr TodoServiceHandler, opts ...server.HandlerOption) error {
	type todoService interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Get(ctx context.Context, in *GetRequest, out *GetResponse) error
		GetAll(ctx context.Context, in *GetAllRequest, out *GetAllResponse) error
		Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		Hello(ctx context.Context, in *Message, out *Message) error
	}
	type TodoService struct {
		todoService
	}
	h := &todoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TodoService{h}, opts...))
}

type todoServiceHandler struct {
	TodoServiceHandler
}

func (h *todoServiceHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.TodoServiceHandler.Create(ctx, in, out)
}

func (h *todoServiceHandler) Get(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.TodoServiceHandler.Get(ctx, in, out)
}

func (h *todoServiceHandler) GetAll(ctx context.Context, in *GetAllRequest, out *GetAllResponse) error {
	return h.TodoServiceHandler.GetAll(ctx, in, out)
}

func (h *todoServiceHandler) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.TodoServiceHandler.Update(ctx, in, out)
}

func (h *todoServiceHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.TodoServiceHandler.Delete(ctx, in, out)
}

func (h *todoServiceHandler) Hello(ctx context.Context, in *Message, out *Message) error {
	return h.TodoServiceHandler.Hello(ctx, in, out)
}
